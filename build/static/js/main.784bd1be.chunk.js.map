{"version":3,"sources":["components/Intro.js","components/Map.js","components/Main.js","components/CineLocator.js","context/Context.js","App.js","serviceWorker.js","index.js"],"names":["Intro","onStartButtonClick","useContext","Context","className","alt","onClick","Map","state","scriptSrc","Date","now","styleSrc","componentWillUnmount","Array","from","document","getElementsByClassName","forEach","tag","parentNode","removeChild","this","src","script","createElement","classList","add","async","head","appendChild","link","href","rel","Fragment","id","Component","Main","populateCitySelectBox","handleCitySelectChange","onLocateTheartersClick","useEffect","resizeEvent","window","createEvent","initUIEvent","orientationChangeEvent","setTimeout","test","navigator","userAgent","dispatchEvent","scrollTo","top","left","behavior","coordinateDiv","useRef","name","onChange","value","event","ref","CineLocator","displayIntro","React","createContext","ContextProvider","props","useState","setDisplayIntro","cityCoordinates","setCityCoordinates","localStorage","getItem","Provider","setItem","cities","require","sort","a","b","Name","cityOptions","city","index","push","key","Code","parseFloat","X","Y","coordinateString","target","split","coordinates","coordinateDivRef","preventDefault","current","innerHTML","alert","children","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.784bd1be.chunk.js","sourcesContent":["import React, { useContext } from \"react\";\nimport { Context } from \"../context/Context\";\n\nconst Intro = () => {\n  const { onStartButtonClick } = useContext(Context);\n\n  return (\n    <div className=\"intro-container\">\n      <br />\n      <div className=\"logo logo-homepage\" alt=\"CineLocator\" />\n      <h1>מצא את הקולנוע הקרוב לעיר בה אתה גר!</h1>\n      <br />\n      <button className=\"btn start-btn\" onClick={onStartButtonClick}>\n        כניסה\n      </button>\n    </div>\n  );\n};\n\nexport default Intro;\n","import React, { Component } from \"react\";\nclass Map extends Component {\n  state = {\n    scriptSrc: [`./map/resources/qgis2web.js?v=${Date.now()}`],\n    styleSrc: [\n      `./map/resources/ol.css?v=${Date.now()}`,\n      `./map/resources/fontawesome-all.min.css?v=${Date.now()}`,\n      `./map/resources/ol3-layerswitcher.css?v=${Date.now()}`,\n      `./map/resources/qgis2web.css?v=${Date.now()}`,\n      `./map/resources/map.css?v=${Date.now()}`,\n    ],\n  };\n\n  componentDidMount() {\n    // Script and CSS injection on mount - solves OpenLayers Webmap not appearing\n    this.state.scriptSrc.forEach((src) => {\n      const script = document.createElement(\"script\");\n\n      script.src = src;\n      script.classList.add(\"mounted\");\n      script.async = true;\n\n      document.head.appendChild(script);\n    });\n\n    this.state.styleSrc.forEach((src) => {\n      const link = document.createElement(\"link\");\n\n      link.href = src;\n      link.classList.add(\"mounted\");\n      link.rel = \"stylesheet\";\n\n      document.head.appendChild(link);\n    });\n  }\n\n  componentWillUnmount = () => {\n    const addedTags = Array.from(document.getElementsByClassName(\"mounted\"));\n\n    addedTags.forEach((tag) => {\n      tag.parentNode.removeChild(tag);\n    });\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"map-container\">\n          <div id=\"map\">\n            <div id=\"popup\" className=\"ol-popup\">\n              <a href=\"/#\" id=\"popup-closer\" className=\"ol-popup-closer\">\n                {\"\"}\n              </a>\n              <div id=\"popup-content\"></div>\n            </div>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Map;\n","import React, { useContext, useRef, useEffect } from \"react\";\nimport Map from \"./Map\";\nimport { Context } from \"../context/Context\";\n\nconst Main = () => {\n  const {\n    populateCitySelectBox,\n    handleCitySelectChange,\n    onLocateTheartersClick,\n  } = useContext(Context);\n\n  // Fix OpenLayers resize glitch\n  useEffect(() => {\n    // Resize event for dektop\n    var resizeEvent = window.document.createEvent(\"UIEvents\");\n    resizeEvent.initUIEvent(\"resize\", true, false, window, 0);\n\n    // OrientationChange for mobile\n    var orientationChangeEvent = window.document.createEvent(\"UIEvents\");\n    orientationChangeEvent.initUIEvent(\n      \"orientationchange\",\n      true,\n      false,\n      window,\n      2\n    );\n\n    setTimeout(() => {\n      if (\n        /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(\n          navigator.userAgent\n        )\n      ) {\n        window.dispatchEvent(orientationChangeEvent);\n        window.dispatchEvent(orientationChangeEvent);\n        window.scrollTo({\n          top: -200,\n          left: 0,\n          behavior: \"smooth\",\n        });\n      } else {\n        window.dispatchEvent(resizeEvent);\n      }\n    }, 150);\n  });\n\n  const coordinateDiv = useRef(null);\n\n  return (\n    <React.Fragment>\n      <div className=\"content-container\">\n        <br />\n        <br />\n        <br />\n        <div className=\"logo logo-main\" alt=\"CineLocator\" />\n        <div className=\"input-container\">\n          <select\n            name=\"cities\"\n            className=\"city-select\"\n            onChange={handleCitySelectChange}\n          >\n            <option value=\"0\">בחר עיר:</option>\n            {populateCitySelectBox()}\n          </select>\n        </div>\n        <br />\n        <button\n          className=\"btn btn-locate\"\n          onClick={(event) => onLocateTheartersClick(event, coordinateDiv)}\n        >\n          חפש קולנוע בסביבתך\n        </button>\n        <h4>* בתי קולנוע מרשתות yes Planet, Cinema City ו-HOT Cinema בלבד</h4>\n        <div ref={coordinateDiv} id=\"city-coordinates\"></div>\n        <br />\n        <Map />\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default Main;\n","import React, { useContext } from \"react\";\nimport { Context } from \"../context/Context\";\nimport Intro from \"./Intro\";\nimport Main from \"./Main\";\n\nconst CineLocator = () => {\n  const { displayIntro } = useContext(Context);\n\n  return (\n    <React.Fragment>\n      {displayIntro ? <Intro /> : <Main />}\n      <footer>כל הזכויות שמורות לעידן רם © 2020</footer>\n    </React.Fragment>\n  );\n};\n\nexport default CineLocator;\n","import React, { useState, useEffect } from \"react\";\nimport CineLocator from \"../components/CineLocator\";\n\nexport const Context = React.createContext();\n\nconst ContextProvider = (props) => {\n  const [displayIntro, setDisplayIntro] = useState(true);\n  const [cityCoordinates, setCityCoordinates] = useState(null);\n\n  useEffect(() => {\n    const localDisplayIntro = localStorage.getItem(\"displayIntro\");\n\n    if (localDisplayIntro === \"false\") {\n      setDisplayIntro(false);\n    }\n  }, []);\n\n  const onStartButtonClick = () => {\n    setDisplayIntro(false);\n    localStorage.setItem(\"displayIntro\", false);\n  };\n\n  const populateCitySelectBox = () => {\n    const cities = require(\"../data/City_List.json\").sort((a, b) => {\n      if (a.Name < b.Name) {\n        return -1;\n      }\n      if (a.Name > b.Name) {\n        return 1;\n      }\n      return 0;\n    });\n\n    let cityOptions = [];\n\n    cities.forEach((city, index) => {\n      cityOptions.push(\n        <option\n          key={city.Code}\n          name={city.Name}\n          value={[parseFloat(city.X), parseFloat(city.Y)]}\n        >\n          {city.Name}\n        </option>\n      );\n    });\n\n    return cityOptions;\n  };\n\n  const handleCitySelectChange = (event) => {\n    const coordinateString = event.target.value.split(\",\");\n\n    // console.log(coordinateString);\n\n    const coordinates = [\n      parseFloat(coordinateString[0]),\n      parseFloat(coordinateString[1]),\n    ];\n\n    setCityCoordinates(coordinates);\n  };\n\n  const onLocateTheartersClick = (event, coordinateDivRef) => {\n    event.preventDefault();\n\n    if (cityCoordinates && cityCoordinates[0] && cityCoordinates[1]) {\n      coordinateDivRef.current.innerHTML = `${cityCoordinates[0]},${cityCoordinates[1]}`;\n    } else {\n      window.alert(\"אנא בחר עיר!\");\n    }\n  };\n\n  return (\n    <Context.Provider\n      value={{\n        displayIntro,\n        onStartButtonClick,\n        populateCitySelectBox,\n        cityCoordinates,\n        handleCitySelectChange,\n        onLocateTheartersClick,\n      }}\n    >\n      {props.children}\n    </Context.Provider>\n  );\n};\n\nexport default ContextProvider;\n","import React from \"react\";\nimport ContextProvider from \"./context/Context\";\nimport CineLocator from \"./components/CineLocator\";\n\nconst App = () => {\n  return (\n    <ContextProvider>\n      <CineLocator />\n    </ContextProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}